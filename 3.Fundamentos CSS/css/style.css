/* 
Regla CSS consta de 2 partes:
1) El selector
2) El bloque de declaraciones: {
  atributo: valor;
  atributo-de-mas-de-dos-palabras: otro valor;
} 
*/

/* Son mala pr√°ctica porque son bloqueantes a la hora de que el navegador lee esta instrucci√≥n */
@import url("otra-hoja.css");

h1 {
  color: orangered;
  background-color: black;
}

p {
  color: midnightblue;
}

/* Dar estilos con Id se considera un Antipatron */
#parrafo-dos {
  background-color: skyblue;
}

/* Dar estilos con clases nos permite reutilizar nuestro c√≥digo CSS */
.text-20 {
  font-size: 20px;
}

.text-32 {
  font-size: 32px;
}

.bg-skyblue {
  background-color: skyblue;
}

.bg-steelblue {
  background-color: steelblue;
}

.text-white {
  color: white;
}

/* Solamente aplica a los elementos en el primer nivel. Se aplica el pico parentesis */
.hijos-directos > li {
  background-color: thistle;
}

/* Va a estar representado por un espacio en blanco. */
.hijos-descendientes b {
  background-color: thistle;
}

/* Aplica el selector solamente a los elementos que sean hermanos (mismo nivel) y que esten por debajo del elemento de referencia. Se aplica con el caracter ~ */
.hermanos-general ~ li {
  background-color: thistle;
}

/* Va a aplicar los estilos al elemento que coincida con la segunda parte del selector y que este inmediatamente debajo del selector de referencia. Se aplica con el simbolo de la suma + */
.hermanos-adyacentes + li {
  background-color: thistle;
}

/* SELECTORES DE ATRIBUTOS */
/*Se pone entre corchetes el atributo al que se va a hacer referencia*/
.selectores-atributos a[href] {
  color: orangered;
}

/* Solo esta aplicando el estilo tag "a" que tengan un atributo "target"*/
.selectores-atributos a[target="_blank"] {
  font-weight: bold;
}

/* El comodin * aplica el estilo si contiene el texto en cuesti√≥n en cualquier parte*/
.selectores-atributos a[href*="mircha"] {
  font-size: 24px;
}

/* El comodin ^ aplica el estilo si coincide con el texto inicial*/
.selectores-atributos a[href^="http://"]
{
  text-decoration: none;
}

/* El comodin $ aplica el estilo si coincide con el texto al final*/
.selectores-atributos a[href$=".com"] {
  background-color: black;
}

/* El comodin ~ aplica el estilo si coincide con el texto en una lista separada por espacios*/
.selectores-atributos a[class~="cursos"] {
  background-color: midnightblue;
}

/* El comodin | aplica el estilo si coincide con el texto en una lista separada por espacios y que despues del texto en cuestion pueda venir el caracter -*/
.selectores-atributos a[class|="menu"] {
  font-style: italic;
}

/* Selector Universal */
* {
  font-family: sans-serif;
}

/* Ejemplo de selector universal dentro de una secci√≥n */
.selector-universal * {
  font-size: 24px;
}

/* Pseudoclases - Dan estilos dependiendo del contexto, posici√≥n o estado del elemento. */

.form-pseudoclases *:required {
  border-color: brown;
}

.form-pseudoclases *:valid {
  border-color: blue;
}

.form-pseudoclases *:invalid {
  border-color: red;
}

.form-pseudoclases *:focus {
  background-color: skyblue;
}

.form-pseudoclases *:disabled {
  background-color: pink;
}

/* Orden de las pseudoclases para los elementos (a) */

/*
1. :link
2. :active
3. :visited
4. :hover
*/

/* Estilo aplicado a los elementos (a) del temario */
a:link {
  color: chartreuse;
}
/* Estilo aplicado a los elementos (a) del temario */
a:active {
  color: purple;
}

.menu-pseudoclases a:visited {
  color: olive;
}

.menu-pseudoclases a:hover {
  color: orange;
}

.p-pseudoclases:hover {
  font-size: 20px;
}

#temario-css:target {
  background-color: lightgreen;
}

/* Pseudo-classes por posici√≥n*/

.lista-pseudoclases li:first-child {
  color: green;
}

.lista-pseudoclases li:last-child {
  color: violet;
}

.lista-pseudoclases li:nth-child(3) {
  color: navy;
}

.lista-pseudoclases :nth-child(4n) {
  font-size: 20px;
}

.lista-pseudoclases :nth-child(3n + 1) {
  font-weight: bold;
}

/* Aplicando background-color a elementos pares */
.lista-pseudoclases :nth-child(even) {
  background-color: gray;
}

/* Aplicando background-color a elementos impares */
.lista-pseudoclases :nth-child(odd) {
  background-color: yellow;
}

/* Pseudo-classes por tipo de elemento*/

.articulo-pseudoclases p:first-of-type {
  background-color: pink;
}

.articulo-pseudoclases p:last-of-type {
  background-color: blueviolet;
}

.articulo-pseudoclases p:nth-of-type(3) {
  background-color: green;
}

/* not(p, .nombre-class, #, a, footer) */
.articulo-pseudoclases *:not(p) {
  background-color: aquamarine;
}

/* Pseudo-elementos - Dan estilos a partes especificas concretas de un documentos. CSS3 (::) se usa para distinguir elementos de pseudo clases */

.pc-lenovo::before {
  content: "üñ•Ô∏è";
}

.pc-lenovo::after {
  content: "üåê";
}

.pc-precio::before {
  content: "$";
  font-weight: bold;
}

.pc-precio::after {
  content: " USD";
  font-weight: bold;
}

/* Letra capital */

.p-pseudoelementos::first-letter {
  font-weight: bold;
  font-size: 32px;
}

/* Cambia el color de la primera linea */
.p-pseudoelementos::first-line {
  color: coral;
}

/* Cambia el color cuando se selecciona un p√°rrafo */
.p-pseudoelementos::selection {
  color: greenyellow;
  background-color: black;
}

.input-pseudoelementos::placeholder {
  color: green;
}

/* Agrupar selectores */
.form-agrupar-selectores input[type="text"],
.form-agrupar-selectores input[type="email"],
.form-agrupar-selectores textarea {
  border-color: yellow;
  border-width: 2px;
  border-style: dashed;
  background-color: black;
  font-size: 20px;
  color: yellow;
  display: block;
  width: 300px;
}

/* El algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender este concepto para que entiendas como se aplican y en algunas ocasiones se sobreescriben las reglas CSS
1) La C√°scada.
2) La Espeificidad.
3) La Herencia.

La C√°scada es el mecanismo en que el navegador aplica los estilos. Y toma en cuenta lo siguiente en este orden: 
1) El Origen del C√≥digo:
 - El User Agent (los estilos por defecto del navegador)
 - Personalizaciones del usuario.
 - Los estilos del autor.
2) La Especificidad del Selector
3) Orden de Aparici√≥n 

La Especificidad es el peso que tiene un selector cuando hay un conflicto de estilos. Se calcula de la siguiente forma:
  Etiquetas y pseudoelementos ------------- 0,0,0,1
  Clases, atributos y pseudoclases -------- 0,0,1,0
  Identificadores ------------------------- 0,1,0,0
  Estilos en l√≠nea ------------------------ 1,0,0,0
  !important --------------- Rompe la especificidad

La Herencia, es la capacidad de un selector de obtener (heredar) los valores de sus ancestros m√°s cercanos, para aplicarla se usa el valor de inherit, si queremos evitarla podemos asignar otro valor o inicializar la propiedad en cuestion con valor initial
*/

blockquote#cita-marco.cita-marco {
  background-color: lightsteelblue;
}

blockquote {
  background-color: burlywood;
}

#cita-marco {
  background-color: lightgreen;
}

blockquote.cita-marco {
  background-color: tomato;
}

.cita-marco {
  background-color: cornflowerblue;
}

.cita-marco {
  background-color: mediumaquamarine !important;
}

blockquote#cita-marco {
  background-color: lightsalmon;
}

.cita-marco {
  background-color: darkorange !important; /* por cascada gana al primer !important*/
  font-size: 32px; /*se hereda el valor a los elementos contenidos en la clase*/
  border-style: dotted;
  border-color: brown;
}

/* esta heredando */
.cita-marco cite {
  background-color: pink;
  background-color: inherit;
  font-size: 24px; /* evitando la herencia asignando un valor */
  font-size: initial; /* evitando la herencia asignando initial */
  border-style: inherit;
  border-color: inherit;
}
